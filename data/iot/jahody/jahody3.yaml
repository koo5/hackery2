
# https://protosupplies.com/product/capacitive-soil-moisture-sensor-module/
# - use nail varnish or similar to seal the edges of the pcb
# - VCC = 3.3V – 5.5V


substitutions:
  ip: 192.168.8.32
  name: banana


preferences:
  flash_write_interval: 30s

esphome:
  name: $name
  on_boot:
    then:
      - ds1307.read_time:
      - delay: 180s
      - if:
          condition:
            lambda: |-
                return (id(hour).state == -1);
          then:
              - logger.log: "periodic pump disabled, sleep for 1h..."
              - deep_sleep.enter:
                  id: deep_sleep_1
                  sleep_duration: 1h
          else:

            # tady je potreba ntp vymenit za rtc
            # a po prvnim synchronizacnim bootu znova rebootnout

            - if:
                condition:
                    lambda: |-
                        return (id(ntp).utcnow().timestamp > 1680000000) && (id(ntp).utcnow().timestamp - id(last_pump_ts).state > 60*60*20) && (id(ntp).utcnow().hour > id(hour).state);
                then:
                    - number.set:
                        id: last_pump_ts 
                        value: !lambda |-
                                  return id(ntp).utcnow().timestamp;
                    - delay: 40s # flush
                    - logger.log: "periodic action!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!..."
                    - switch.turn_on: periodic_pump1
                    - delay: 140s
                    - logger.log: "periodic action offfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff..."
                    - switch.turn_off: periodic_pump1
                    - logger.log: "sleep for 20h..."
                    - deep_sleep.enter:
                            id: deep_sleep_1
                            #sleep_duration: !lambda |-
                            #  return 20*60*60
                            sleep_duration: 20h
                else:
                    - logger.log: "nothing to do yet, sleep..."
                    - deep_sleep.enter:
                        id: deep_sleep_1
                        sleep_duration: 2h




esp32:
  board: denky32

wifi:
  networks:
  - ssid: !secret ssid
    password: !secret password
    manual_ip:
      static_ip: $ip
      gateway: 192.168.8.1
      subnet: 255.255.255.0
      dns1: 192.168.8.1
      dns2: 8.8.8.8
    
  #ap:
  #  ssid: !secret fallback_ssid
  #  password: !secret fallback_password



api:
  password: ""
  reboot_timeout: 1h # 0s # The amount of time to wait before rebooting when no WiFi connection exists. Can be disabled by setting this to 0s, but note that the low level IP stack currently 
  
  
  
mqtt:
  broker: !secret mqtt_host
  port: !secret mqtt_port
  username: !secret mqtt_user
  password: !secret mqtt_password



ota:
  password: ""

logger:

captive_portal:
    
web_server:
  port: 80
  ota: true



sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal
    name: "Irrigation Wifi"
    update_interval: 60s
    
  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth


      
light:
  - platform: status_led
    name: "status LED(pin2)"
    id: status
    pin: 2



switch:
  - platform: gpio
    pin: 20
    id: periodic_pump1
    name: "periodic_pump1"
  - platform: restart
    id: manual_restart
    name: "Living Room Restart"



sun:
  latitude: 50.0755°
  longitude: 14.4378°

  on_sunrise:
    - then:
        - logger.log: Good morning!
  on_sunset:
    - then:
        - logger.log: Good evening!




# display sun values in gui        
text_sensor:
  - platform: sun
    name: Next Sunrise
    type: sunrise
  - platform: sun
    name: Next Sunset
    type: sunset
  - platform: template
    name: "Time NTP"
    lambda: |-
      char str[30];
      if (!id(ntp).now().is_valid()) { return { "----" }; }
      time_t currTime = id(ntp).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 5s
  - platform: template
    name: "Time RTC"
    lambda: |-
      char str[30];
      time_t currTime = id(rtc).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 5s





        
time:  # https://esphome.io/components/time/ds1307.html#ds1307-config-example

  - platform: ds1307
    id: rtc
    update_interval: never

  - platform: homeassistant
    on_time_sync:
      then:
        - logger.log: "rtc.write_time..."
        - ds1307.write_time
        - logger.log: "Synchronized clock."

  - platform: sntp
    id: ntp
    #timezone: Europe/Prague
    on_time_sync:
      then:
        - logger.log: "rtc.write_time..."
        - ds1307.write_time
        - logger.log: "Synchronized clock."



deep_sleep:
  wakeup_pin: 13
  id: deep_sleep_1



i2c:
#  sda: 21
#  scl: 22
  scan: true
  id: bus_a



number:
  
  - platform: template
    id: hour
    name: "pump hour"
    min_value: -1
    max_value: 23
    step: 1
    restore_value: true
    initial_value: 18
    optimistic: true
  
  - platform: template
    id: last_pump_ts
    name: "last_pump_ts"
    min_value: 0
    max_value: 3360287004
    step: 1
    restore_value: true
    initial_value: 0
    optimistic: true
