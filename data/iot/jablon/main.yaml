
# https://protosupplies.com/product/capacitive-soil-moisture-sensor-module/
# - use nail varnish or similar to seal the edges of the pcb
# - VCC = 3.3V – 5.5V

# motor psu protection 2 x TVS BZW06-5V8 in series


substitutions:
  ip: 192.168.8.31
  name: banana
  clock: ntp


esphome:
  name: $name
  on_boot:
    then:
      - logger.log: 'booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooot'


esp32:
  board: denky32


network:
  enable_ipv6: true


web_server:
  port: 80
#  ota: true


wifi:
  networks:
  - ssid: !secret ssid
    password: !secret password
    manual_ip:
      static_ip: $ip
      gateway: 192.168.8.1
      subnet: 255.255.255.0
      dns1: 192.168.8.1
      #dns2: 8.8.8.8


api:
  password: ""
  reboot_timeout: 1h # 0s # The amount of time to wait before rebooting when no WiFi connection exists. Can be disabled by setting this to 0s, but note that the low level IP stack currently 


mqtt:
  broker: !secret mqtt_host
  port: !secret mqtt_port
  #username: !secret mqtt_user
  #password: !secret mqtt_password
  keepalive: 5s
  reboot_timeout: 3min


ota:
  password: ""

    
logger:
  level: DEBUG


sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: wifi_signal
    name: "Irrigation Wifi"
    update_interval: 10s
    
  - platform: adc
    pin: 35
    id: dryness
    name: "dryness"
    update_interval: 3s
    attenuation: 11db
    filters:
      - multiply: 10

  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth

      
light:
  - platform: status_led
    name: "status_led_gpio2"
    id: status_led_gpio2
    pin: 2


switch:
  - platform: gpio
    pin: 19
    id: pump_switch
    name: "pump_switch"
    restore_mode: ALWAYS_OFF

  - platform: gpio
    pin: 20
    id: dummy
    name: "dummy"
    restore_mode: ALWAYS_OFF

  - platform: restart
    id: manual_restart
    name: "Living Room Restart"
    
    
climate:
  - platform: thermostat
    id: suchostat
    name: "suchostat"
    sensor: dryness
    min_cooling_run_time: 2s
    max_cooling_run_time: 3s
    min_cooling_off_time: 4s
    min_idle_time: 60s
    supplemental_cooling_action:
      - script.execute: maybe_pump
    supplemental_cooling_delta: 0
    cool_action:
      - logger.log: cool!
    idle_action:
      - light.turn_off: status_led_gpio2
      - switch.turn_off: pump_switch
    default_preset: Home
    preset:
      - name: Home
        mode: COOL
        default_target_temperature_high: 16.3 °C




sun:
  latitude: 50.0755°
  longitude: 14.4378°

  on_sunrise:
    - then:
        - logger.log: Good morning!
  on_sunset:
    - then:
        - logger.log: Good evening!




text_sensor:
  - platform: sun
    name: Next Sunrise
    type: sunrise
  - platform: sun
    name: Next Sunset
    type: sunset
  - platform: template
    name: "Time NTP"
    lambda: |-
      char str[30];
      if (!id(ntp).now().is_valid()) { return { "----" }; }
      time_t currTime = id(ntp).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 15s
  - platform: template
    name: "Time RTC"
    lambda: |-
      char str[30];
      time_t currTime = id(rtc).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 15s

  - platform: template
    id: last_pump_ts_text
    name: last_pump_ts_text
    lambda: |-
      char str[30];
      time_t currTime = id(last_pump_ts).state;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 1s


time:
  - platform: sntp
    id: ntp
    timezone: Europe/Prague
    on_time_sync:
      then:
      - if:
            condition:
                lambda: |-
                        return id(ntp).now().is_valid() && id(ntp).now().year > 2022;
            then:
                - logger.log: "rtc.write_time..."
                - ds1307.write_time
                - logger.log: "Synchronized clock."
            else:
                - logger.log: 'not trying to save invalid time'

  - platform: ds1307
    id: rtc
    update_interval: never



i2c:
#  sda: 21
#  scl: 22
  scan: true
  id: bus_a



number:
  - platform: template
    id: last_pump_ts
    name: "last_pump_ts"
    min_value: 0
    max_value: 3360287004
    step: 1
    restore_value: true
    initial_value: 0
    optimistic: true


script:
  - id: maybe_pump
    mode: parallel
    max_runs: 1
    then:
        - if:
            condition:
                lambda: |-
                   return id($clock).now().is_valid() && id($clock).now().year > 2022;
            then:
                - logger.log:
                    format: "%d is valid time"
                    args: [ 'id($clock).now()' ]
                - if:
                      condition:
                          lambda: |-
                              return id($clock).now().hour >= 8 && id($clock).now().hour < 22;
                      then:
                        - logger.log:
                            format: "%d Land is dry and Sun is above horizon!"
                            args: [ 'id($clock).now()' ]
                        - script.execute: pump
                      else:
                          - logger.log: Land is dry and Sun is below horizon!
            else:
                - logger.log:
                    format: "%d There's no time! Get in the choppa!"
                    args: [ 'id($clock).now()' ]
                - script.execute: pump

  - id: pump
    mode: parallel
    max_runs: 1
    then:
      - number.set:
          id: last_pump_ts
          value: !lambda |-
            return id($clock).utcnow().timestamp;

      - light.turn_on: status_led_gpio2
      - delay: 2s
      - light.turn_off: status_led_gpio2

      - switch.turn_on: pump_switch
      - delay: 0.3s
      - switch.turn_off: pump_switch


button:
  - platform: wake_on_lan
    name: "Start jj"
    target_mac_address: fc:34:97:a1:f5:ca

  - platform: wake_on_lan
    name: "Start hp"
    target_mac_address: a4:5d:36:9b:18:16

  - platform: wake_on_lan
    name: "Start r64"
    target_mac_address: a8:a1:59:38:51:47

