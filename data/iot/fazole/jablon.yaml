
substitutions:
  ip: 10.0.0.45
  name: fazole
  clock: ntp

esphome:
  name: $name
  on_boot:
    then:
      - logger.log: 'booooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooot'

esp32:
  board: 


wifi:
  networks:
  - ssid: !secret ssid
    password: !secret password
    manual_ip:
      static_ip: $ip
      gateway: 10.0.0.138
      subnet: 255.255.255.0
      dns1: 10.0.0.138
      dns2: 8.8.8.8


mqtt:
  broker: !secret mqtt_host
  port: !secret mqtt_port
  username: !secret mqtt_user
  password: !secret mqtt_password
  keepalive: 8s
  reboot_timeout: 50min


ota:
  password: ""

    
logger:


captive_portal:


web_server:
  port: 80


sensor:
  - platform: uptime
    name: Uptime Sensor

  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth

  - platform: wifi_signal
    name: "Irrigation Wifi"
    update_interval: 60s



    
  - platform: adc
    pin: 35
    id: wetness
    update_interval: 5s
    attenuation: 11db
    filters:
      - invert
      - multiply: 10




switch:
  - platform: gpio
    pin: 19
    id: s0
    name: "s0"
    restore_mode: ALWAYS_OFF




  - platform: restart
    id: manual_restart
    name: "Living Room Restart"
    


    
climate:
  - platform: thermostat
    id: suchostat
    name: "suchostat"
    sensor: dryness
    min_cooling_run_time: 2s
    max_cooling_run_time: 3s
    min_cooling_off_time: 4s
    min_idle_time: 60s
    supplemental_cooling_action:
      - script.execute: maybe_pump
    supplemental_cooling_delta: 0
    cool_action:
      - logger.log: cool!
    idle_action:
      - light.turn_off: status
      - switch.turn_off: s3
    default_preset: Home
    preset:
      - name: Home
        mode: COOL
        default_target_temperature_high: 15 °C




sun:
  latitude: 50.0755°
  longitude: 14.4378°

  on_sunrise:
    - then:
        - logger.log: Good morning!
  on_sunset:
    - then:
        - logger.log: Good evening!




text_sensor:
  - platform: sun
    name: Next Sunrise
    type: sunrise
  - platform: sun
    name: Next Sunset
    type: sunset
  - platform: template
    name: "Time NTP"
    lambda: |-
      char str[30];
      if (!id(ntp).now().is_valid()) { return { "----" }; }
      time_t currTime = id(ntp).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 15s
  - platform: template
    name: "Time RTC"
    lambda: |-
      char str[30];
      time_t currTime = id(rtc).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 15s




time:
  - platform: sntp
    id: ntp
    timezone: Europe/Prague
    on_time_sync:
      then:
      - if:
            condition:
                lambda: |-
                        return id(ntp).now().is_valid() && id(ntp).now().year > 2022;
            then:
                - logger.log: "rtc.write_time..."
                - ds1307.write_time
                - logger.log: "Synchronized clock."
            else:
                - logger.log: 'not trying to save invalid time'

  - platform: ds1307
    id: rtc
    update_interval: never



i2c:
#  sda: 21
#  scl: 22
  scan: true
  id: bus_a



number:
  - platform: template
    id: last_pump_ts
    name: "last_pump_ts"
    min_value: 0
    max_value: 3360287004
    step: 1
    restore_value: true
    initial_value: 0
    optimistic: true


script:
  - id: maybe_pump
    mode: parallel
    max_runs: 1
    then:
        - if:
            condition:
                lambda: |-
                   return id($clock).now().is_valid() && id($clock).now().year > 2022;
            then:
                - logger.log:
                    format: "%d is valid time"
                    args: [ 'id($clock).now()' ]
                - if:
                      condition:
                          lambda: |-
                              return id($clock).now().hour >= 8 && id($clock).now().hour < 22;
                      then:
                        - logger.log:
                            format: "%d Land is dry and Sun is above horizon!"
                            args: [ 'id($clock).now()' ]
                        - script.execute: pump
                      else:
                          - logger.log: Land is dry and Sun is below horizon!
            else:
                - logger.log:
                    format: "%d There's no time! Get in the choppa!"
                    args: [ 'id($clock).now()' ]
                - script.execute: pump

  - id: pump
    mode: parallel
    max_runs: 1
    then:
      - number.set:
          id: last_pump_ts
          value: !lambda |-
            return id($clock).utcnow().timestamp;

      - light.turn_on: status
      - delay: 2s
      - light.turn_off: status

      - switch.turn_on: s3
      - delay: 0.3s
      - switch.turn_off: s3
