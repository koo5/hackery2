  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results




                - http_request.get:
                    url: !secret ping_url
                    verify_ssl: false
                    on_response:
                        then:
                        - logger.log:
                            format: "Response status: %d"
                            args:
                                - status_code




http_request:
  timeout: 34s










          #- deep_sleep.enter:
          #    id: deep_sleep_1
          #    until: "16:00:00"
          #    time_id: ntp

#          - deep_sleep.enter:
#              id: deep_sleep_1
#              sleep_duration: 30s












seems to have issues with WiFi where a full reboot is required to get the interface back working. Defaults to 15min.
  #power_save_mode: # (Optional, string): The power save mode for the WiFi interface. See Power Save Mode
  #output_power: 15dB # (Optional, string): The amount of TX power for the WiFi interface from 8.5dB to 20.5dB. Default for ESP8266 is 20dB, 20.5dB might cause unexpected restarts.
  #fast_connect: true # (Optional, boolean): If enabled, directly connects to WiFi network without doing a full scan first. This is required for hidden networks and can significantly improve connection times. Defaults to off. The downside is that this option connects to the first network the ESP sees, even if that network is very far away and better ones are available.    
  








      - http_request.get:
            url: !secret ping_url
            verify_ssl: false
            on_response:
                then:
                - logger.log:
                    format: "Response status: %d"
                    args:
                        - status_code
  








                - http_request.get:
                    url: !secret ping_url
                    verify_ssl: false
                    on_response:
                        then:
                        - logger.log:
                            format: "Response status: %d"
                            args:
                                - status_code








  
services:
    - service: ota_mode_on
      then: 
        - logger.log: "deep_sleep.prevent..."
        - deep_sleep.prevent: deep_sleep_1
    - service: ota_mode_off
      then:
        - logger.log: "deep_sleep.allow..."
        - deep_sleep.allow: deep_sleep_1






interval:
  - interval: 240min
    then:
      - delay: 240min
      - switch.toggle: manual_restart



globals:
  - id: my_global_int
    type: int
    restore_value: yes
    initial_value: '5'


