  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results




                - http_request.get:
                    url: !secret ping_url
                    verify_ssl: false
                    on_response:
                        then:
                        - logger.log:
                            format: "Response status: %d"
                            args:
                                - status_code




http_request:
  timeout: 34s










          #- deep_sleep.enter:
          #    id: deep_sleep_1
          #    until: "16:00:00"
          #    time_id: ntp

#          - deep_sleep.enter:
#              id: deep_sleep_1
#              sleep_duration: 30s











  on_message:
    - topic: $name/ota_mode
      payload: 'ON'
      then:
        - logger.log: "deep_sleep.prevent..."
        - deep_sleep.prevent: deep_sleep_1
    - topic: $name/ota_mode
      payload: 'OFF'
      then:
        - logger.log: "deep_sleep.allow..."
        - deep_sleep.allow: deep_sleep_1
    - topic: $name/inc
      then:
        - logger.log: "inc..."
        - lambda: |-
            id(my_global_int) += 1;
    - topic: $name/now
      then:
        - logger.log: "now..."
        - lambda: |-
            id(my_global_int) = id(ntp).utcnow().timestamp;
        - number.set:
            id: num1
            value: !lambda |-
              return id(ntp).utcnow().timestamp;









  on_message:
    level: ERROR
    then:
      - mqtt.publish:
          topic: some/topic
          payload: !lambda |-
            return "Triggered on_message with level " + to_string(level) + ", tag " + tag + " and message " + message;





#  - platform: gpio
#    pin: 2
#    id: status_led_pin2
#    name: "s2"


  - platform: template
    name: "Time RTC"
    lambda: |-
      char str[30];
      time_t currTime = id(rtc).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 5s


  # https://esphome.io/components/time/ds1307.html#ds1307-config-example
  
  
  
  
  
  
deep_sleep:
#  run_duration: 10min
#  sleep_duration: 10min
  wakeup_pin: 13
  id: deep_sleep_1


i2c:
#  sda: 21
#  scl: 22
  scan: true
  id: bus_a









number:
  - platform: template
    id: num1
    name: "blbost"
    optimistic: true
    min_value: 0
    max_value: 3360287004
    step: 1
  - platform: template
    id: hour
    name: "pump hour"
    min_value: 0
    max_value: 24
    step: 1
    restore_value: true
    initial_value: 24
    
  - platform: template
    id: last_pump_ts
    name: "last_pump_ts"
    min_value: 0
    max_value: 3360287004
    step: 1
    restore_value: true
    initial_value: 0
    

globals:
  - id: my_global_int
    type: int
    restore_value: yes
    initial_value: '5'




time:

  - platform: homeassistant
    on_time_sync:
      then:
        - logger.log: "rtc.write_time..."
        - ds1307.write_time
        - logger.log: "Synchronized clock."

  - platform: sntp
    id: ntp
    on_time_sync:
      then:
        - logger.log: "rtc.write_time..."
        - ds1307.write_time
        - logger.log: "Synchronized clock."






seems to have issues with WiFi where a full reboot is required to get the interface back working. Defaults to 15min.
  #power_save_mode: # (Optional, string): The power save mode for the WiFi interface. See Power Save Mode
  #output_power: 15dB # (Optional, string): The amount of TX power for the WiFi interface from 8.5dB to 20.5dB. Default for ESP8266 is 20dB, 20.5dB might cause unexpected restarts.
  #fast_connect: true # (Optional, boolean): If enabled, directly connects to WiFi network without doing a full scan first. This is required for hidden networks and can significantly improve connection times. Defaults to off. The downside is that this option connects to the first network the ESP sees, even if that network is very far away and better ones are available.    
  








      - http_request.get:
            url: !secret ping_url
            verify_ssl: false
            on_response:
                then:
                - logger.log:
                    format: "Response status: %d"
                    args:
                        - status_code
  








                - http_request.get:
                    url: !secret ping_url
                    verify_ssl: false
                    on_response:
                        then:
                        - logger.log:
                            format: "Response status: %d"
                            args:
                                - status_code








  
services:
    - service: ota_mode_on
      then: 
        - logger.log: "deep_sleep.prevent..."
        - deep_sleep.prevent: deep_sleep_1
    - service: ota_mode_off
      then:
        - logger.log: "deep_sleep.allow..."
        - deep_sleep.allow: deep_sleep_1






interval:
  - interval: 240min
    then:
      - delay: 240min
      - switch.toggle: manual_restart



< 
< globals:
<   - id: my_global_int
<     type: int
<     restore_value: yes
<     initial_value: '5'
