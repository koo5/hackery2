
# https://protosupplies.com/product/capacitive-soil-moisture-sensor-module/
# - use nail varnish or similar to seal the edges of the pcb
# - VCC = 3.3V – 5.5V





esphome:
  name: kyticky
  on_boot:
    then:
      ds1307.read_time:

esp32:
  board: denky32

wifi:
  networks:
  - ssid: !secret ssid
    password: !secret password
    manual_ip:
      static_ip: 192.168.8.31
      gateway: 192.168.8.1
      subnet: 255.255.255.0
      dns1: 192.168.8.1
      dns2: 8.8.8.8
    
  ap:
    ssid: !secret fallback_ssid
    password: !secret fallback_password



api:
  password: ""
  reboot_timeout: 1h # 0s # The amount of time to wait before rebooting when no WiFi connection exists. Can be disabled by setting this to 0s, but note that the low level IP stack currently seems to have issues with WiFi where a full reboot is required to get the interface back working. Defaults to 15min.
  #power_save_mode: # (Optional, string): The power save mode for the WiFi interface. See Power Save Mode
  #output_power: 15dB # (Optional, string): The amount of TX power for the WiFi interface from 8.5dB to 20.5dB. Default for ESP8266 is 20dB, 20.5dB might cause unexpected restarts.
  #fast_connect: true # (Optional, boolean): If enabled, directly connects to WiFi network without doing a full scan first. This is required for hidden networks and can significantly improve connection times. Defaults to off. The downside is that this option connects to the first network the ESP sees, even if that network is very far away and better ones are available.    
  services:
    - service: ota_mode_on
      then: 
        - logger.log: "deep_sleep.prevent..."
        - deep_sleep.prevent: deep_sleep_1
    - service: ota_mode_off
      then:
        - logger.log: "deep_sleep.allow..."
        - deep_sleep.allow: deep_sleep_1



mqtt:

  broker: 192.168.8.8
  username: livingroom
  password: !secret mqtt_password

  on_message:
    - topic: kyticky/ota_mode
      payload: 'ON'
      then:
        - logger.log: "deep_sleep.prevent..."
        - deep_sleep.prevent: deep_sleep_1
    - topic: kyticky/ota_mode
      payload: 'OFF'
      then:
        - logger.log: "deep_sleep.allow..."
        - deep_sleep.allow: deep_sleep_1

ota:
  password: ""

    
logger:
  on_message:
    level: ERROR
    then:
      - mqtt.publish:
          topic: some/topic
          payload: !lambda |-
            return "Triggered on_message with level " + to_string(level) + ", tag " + tag + " and message " + message;



captive_portal:
    
web_server:
  port: 80
  ota: false



sensor:
  - platform: adc
    pin: 35
    id: dryness
    name: "dryness"
    update_interval: 1s
    attenuation: 11db
    filters:
      - multiply: 10
  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth


      
light:
  - platform: status_led
    name: "status LED(pin2)"
    id: status
    pin: 2

switch:
#  - platform: gpio
#    pin: 2
#    id: status_led_pin2
#    name: "s2"
  - platform: gpio
    pin: 3
    id: s3
    name: "s3"
  - platform: gpio
    pin: 5
    id: periodic_pump1
    name: "periodic_pump1"
  
    
    
climate:
  - platform: thermostat
    name: "kyticky"
    sensor: dryness
    min_cooling_off_time: 5s
    min_cooling_run_time: 1s
    max_cooling_run_time: 2s
    min_idle_time: 10s
    supplemental_cooling_action:
      - light.turn_on: status


      - http_request.get:
          url: !secret ping_url
          verify_ssl: false
          on_response:
            then:
              - logger.log:
                  format: "Response status: %d"
                  args:
                    - status_code
      

      - delay: 1s
      - light.turn_off: status
      - if:
            condition:
                - sun.is_above_horizon:
            then:
                - logger.log: Sun is above horizon!
                - switch.turn_on: s3
                - delay: 1s
                - switch.turn_off: s3
            else:
                - logger.log: Sun is below horizon!
                
    supplemental_cooling_delta: 1
    cool_action:
      - logger.log: cool!
    idle_action:
      - light.turn_off: status
      - switch.turn_off: s3
    default_preset: Home
    preset:
      - name: Home
        mode: COOL
        default_target_temperature_high: 25 °C
    
    





sun:
  latitude: 50.0755°
  longitude: 14.4378°

  on_sunrise:
    - then:
        - logger.log: Good morning!
  on_sunset:
    - then:
        - logger.log: Good evening!




# display sun values in gui        
text_sensor:
  - platform: sun
    name: Next Sunrise
    type: sunrise
  - platform: sun
    name: Next Sunset
    type: sunset
  - platform: template
    name: "Time NTP"
    lambda: |-
      char str[30];
      if (!id(ntp).now().is_valid()) { return { "----" }; }
      time_t currTime = id(ntp).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 1s
  - platform: template
    name: "Time RTC"
    lambda: |-
      char str[30];
      time_t currTime = id(rtc).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
      //strftime(str, sizeof(str), "%c", localtime(&currTime));
      return  { str };
    update_interval: 1s




        
time:  # https://esphome.io/components/time/ds1307.html#ds1307-config-example

  - platform: ds1307
    id: rtc
    update_interval: never

  - platform: homeassistant
    on_time_sync:
      then:
        - logger.log: "rtc.write_time..."
        - ds1307.write_time
        - logger.log: "Synchronized clock."

  - platform: sntp
    id: ntp
    #timezone: Europe/Prague
    on_time_sync:
      then:
        - logger.log: "rtc.write_time..."
        - ds1307.write_time
        - logger.log: "Synchronized clock."


    on_time:
#      - cron: '* 57 21 * * *'

      - minutes: 20
        #hours: 22
        then:
          - logger.log: "periodic action!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!..."
          - homeassistant.event:
             event: esphome.pump
             data:
               message: "pump!"

          - deep_sleep.prevent: deep_sleep_1
          - switch.turn_on: periodic_pump1

      - minutes: 30
        #hours: 22
        then:
          - logger.log: "periodic action offfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff..."
          - homeassistant.event:
             event: esphome.pump
             data:
               message: "pumpoff!"
          - switch.turn_off: periodic_pump1
          - deep_sleep.allow: deep_sleep_1






          #- deep_sleep.enter:
          #    id: deep_sleep_1
          #    until: "16:00:00"
          #    time_id: ntp

#          - deep_sleep.enter:
#              id: deep_sleep_1
#              sleep_duration: 30s

deep_sleep:
  run_duration: 1min
  sleep_duration: 60min
  wakeup_pin: 13
  id: deep_sleep_1

i2c:
#  sda: 21
#  scl: 22
  scan: true
  id: bus_a



http_request:
  timeout: 34s

