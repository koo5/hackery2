Description: blabla
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 xfwm4 (4.12.5-1ubuntu0.18.04.1) bionic-proposed; urgency=medium
 .
   * SRU backport to keep maximized windows after exiting fullscreen
     videos in Firefox (LP: #1796144)
Author: Sean Davis <smd.seandavis@gmail.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1796144

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-02-21

--- xfwm4-4.12.5.orig/src/focus.c
+++ xfwm4-4.12.5/src/focus.c
@@ -30,6 +30,7 @@
 #include <X11/Xutil.h>
 #include <X11/Xatom.h>
 #include <X11/extensions/shape.h>
+#include <X11/extensions/Xrandr.h>
 
 #include <glib.h>
 #include <gdk/gdk.h>
@@ -210,7 +211,7 @@ clientFocusNew(Client * c)
     {
         if (client_focus)
         {
-            clientAdjustFullscreenLayer (client_focus, FALSE);
+//            clientAdjustFullscreenLayer (client_focus, FALSE);
         }
         clientRaise (c, None);
         clientShow (c, TRUE);
@@ -285,6 +286,29 @@ clientSelectMask (Client * c, Client *ot
     {
         return FALSE;
     }
+    if (1)
+    {
+        int i;
+        int monitor_count;
+        XRRMonitorInfo *monitors;
+
+        monitors = XRRGetMonitors(clientGetXDisplay(c), c->window, True, &monitor_count);
+
+        for (i = 0; i < monitor_count; i++)
+        {
+            if (cursorInMonitor(monitors + i, c->screen_info) && clientInMonitor(monitors + i, c))
+            {
+                break;
+            }
+        }
+
+        if (i == monitor_count)
+        {
+            return FALSE;
+        }
+
+        XRRFreeMonitors(monitors);
+    }
     if (c->type & type)
     {
         return TRUE;
@@ -504,7 +528,7 @@ clientUpdateFocus (ScreenInfo *screen_in
     if (c2)
     {
         clientSetNetState (c2);
-        clientAdjustFullscreenLayer (c2, FALSE);
+//        clientAdjustFullscreenLayer (c2, FALSE);
         frameQueueDraw (c2, FALSE);
         clientUpdateOpacity (c2);
     }
@@ -522,7 +546,7 @@ clientUpdateFocus (ScreenInfo *screen_in
             FLAG_UNSET (c->flags, CLIENT_FLAG_DEMANDS_ATTENTION);
         }
         clientSetNetState (c);
-        restacked = clientAdjustFullscreenLayer (c, TRUE);
+        restacked = true;//        clientAdjustFullscreenLayer (c, TRUE);

         if (!restacked && screen_info->params->raise_on_focus)
         {
--- xfwm4-4.12.5.orig/src/misc.c
+++ xfwm4-4.12.5/src/misc.c
@@ -28,6 +28,7 @@
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/Xmd.h>
+#include <X11/extensions/Xrandr.h>
 #include <glib.h>
 #include <gtk/gtk.h>
 #include <gdk/gdk.h>
@@ -262,3 +263,39 @@ get_atom_name (DisplayInfo *display_info
     return value;
 }
 
+gboolean
+cursorInMonitor(XRRMonitorInfo *monitor, ScreenInfo *screen_info)
+{
+    int monitor_min_x = monitor->x;
+    int monitor_min_y = monitor->y;
+    int monitor_max_x = monitor->x + monitor->width;
+    int monitor_max_y = monitor->y + monitor->height;
+
+    int cursor_x;
+    int cursor_y;
+
+    /* Estos son datos basura que no voy a usar */
+    Window w1, w2;
+    int x2, y2;
+    unsigned int mask;
+
+    XQueryPointer (myScreenGetXDisplay(screen_info), screen_info->xroot, &w1, &w2, &cursor_x, &cursor_y, &x2, &y2, &mask);
+
+    return cursor_x >= monitor_min_x && cursor_x < monitor_max_x
+        && cursor_y >= monitor_min_y && cursor_y < monitor_max_y;
+}
+
+gboolean
+clientInMonitor(XRRMonitorInfo *m, Client *c)
+{
+    int m_x1 = m->x;
+    int m_x2 = m->x + m->width;
+    int m_y1 = m->y;
+    int m_y2 = m->x + m->height;
+    int c_x1 = c->x;
+    int c_x2 = c->x + c->width;
+    int c_y1 = c->y;
+    int c_y2 = c->x + c->height;
+    return m_x1 < c_x2 && m_x2 > c_x1
+        && m_y1 < c_y2 && m_y2 > c_y1;
+}
--- xfwm4-4.12.5.orig/src/misc.h
+++ xfwm4-4.12.5/src/misc.h
@@ -30,6 +30,7 @@
 
 #include <X11/X.h>
 #include <X11/Xlib.h>
+#include <X11/extensions/Xrandr.h>
 #include <glib.h>
 #include "screen.h"
 
@@ -73,4 +74,9 @@ void                     placeSidewalks
 gchar*                   get_atom_name                          (DisplayInfo *,
                                                                  Atom);
 
+gboolean                 cursorInMonitor                        (XRRMonitorInfo *,
+                                                                 ScreenInfo *);
+
+gboolean                 clientInMonitor                        (XRRMonitorInfo *,
+                                                                 Client *c);
 #endif /* INC_MISC_H */
