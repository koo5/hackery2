:- use_module(library(pprint)).


run :-
	Tokens = [
		start(html,[]),

			start(head,[]),
				
				start(title,[]),
				end(title),

				start(script,[src=[47,106,115,47,99,108,105,101,110,116,46,106,115]]),
				end(script),

				singleton(link,[href=[47,99,115,115,47,115,116,121,108,101,46,99,115,115]]),
			
			end(head),

			pcdata([60]),
		
		end(body),
		
		end(html)
	],
	
	phrase(xml_element(Ast), Tokens),
	print_term(Ast, []).


xml_element(element(Name,Attrs,Children)) --> [start(Name,Attrs)], xml_elements(Children), maybe_some_spurious_ends_but_not(Name), [end(Name)].

xml_element(pcdata(Data)) --> [pcdata(Data)].

xml_element(element(Name,Attrs,[])) --> [singleton(Name,Attrs)].

xml_elements([]) --> [].

xml_elements([Child|Children]) --> xml_element(Child), xml_elements(Children).


maybe_some_spurious_ends_but_not(_) --> [].

maybe_some_spurious_ends_but_not(But_we_are_expecting_end_of) --> spurious_end(But_we_are_expecting_end_of), maybe_some_spurious_ends_but_not(But_we_are_expecting_end_of).

spurious_end(But_we_are_expecting_end_of) --> [end(End)], {dif(End, But_we_are_expecting_end_of)}.






/*
koom@dev ~/notes (master) [1]> swipl -s xmldcg -g run.
element(html,
	[],
	[ element(head,
		  [],
		  [ element(title,[],[]),
		    element(script,
			    [ src=[ 47,
				106,
				115,
				47,
				99,
				108,
				105,
				101,
				110,
				116,
				46,
				106,
				115
			      ]
			    ],
			    []),
		    element(link,
			    [ href=[ 47,
				99,
				115,
				115,
				47,
				115,
				116,
				121,
				108,
				101,
				46,
				99,
				115,
				115
			      ]
			    ],
			    [])
		  ]),
	  pcdata([60])
	])?- 
*/
