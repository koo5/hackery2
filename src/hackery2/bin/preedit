#!/usr/bin/env python3
import sys
import os
import subprocess
import threading
import time
import tkinter as tk
from tkinter import ttk

class PreEditGUI:
	def __init__(self, input_file, program_args):
		self.input_file = input_file
		self.program_args = program_args
		self.auto_mode = False
		self.running = True
		
		# Start the target program
		self.process = subprocess.Popen(
			program_args,
			stdin=subprocess.PIPE,
			stdout=subprocess.PIPE,
			stderr=subprocess.STDOUT,
			bufsize=0,
			universal_newlines=True
		)
		
		# Create GUI
		self.setup_gui()
		
		# Start file monitoring thread
		self.monitor_thread = threading.Thread(target=self.monitor_file, daemon=True)
		self.monitor_thread.start()
		
		# Start output monitoring thread
		self.output_thread = threading.Thread(target=self.monitor_output, daemon=True)
		self.output_thread.start()
		
	def setup_gui(self):
		"""Setup the GUI"""
		self.root = tk.Tk()
		self.root.title("PreEdit")
		self.root.geometry("800x600")
		
		# Main frame
		main_frame = ttk.Frame(self.root)
		main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
		
		# Status frame
		status_frame = ttk.Frame(main_frame)
		status_frame.pack(fill=tk.X, pady=(0, 10))
		
		self.status_label = ttk.Label(status_frame, text="Ready - Press F1 to toggle auto mode")
		self.status_label.pack(side=tk.LEFT)
		
		self.mode_label = ttk.Label(status_frame, text="MANUAL", foreground="blue")
		self.mode_label.pack(side=tk.RIGHT)
		
		# Output area (shows program output)
		output_label = ttk.Label(main_frame, text="Program Output:")
		output_label.pack(anchor=tk.W)
		
		output_frame = ttk.Frame(main_frame)
		output_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
		
		self.output_text = tk.Text(output_frame, height=15, state=tk.DISABLED)
		output_scrollbar = ttk.Scrollbar(output_frame, orient=tk.VERTICAL, command=self.output_text.yview)
		self.output_text.configure(yscrollcommand=output_scrollbar.set)
		
		self.output_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
		output_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
		
		# Input area
		input_label = ttk.Label(main_frame, text="Edit Line (incoming data + your edits):")
		input_label.pack(anchor=tk.W)
		
		input_frame = ttk.Frame(main_frame)
		input_frame.pack(fill=tk.X, pady=(0, 10))
		
		self.input_entry = tk.Entry(input_frame, font=("Consolas", 12))
		self.input_entry.pack(fill=tk.X)
		
		# Button frame
		button_frame = ttk.Frame(main_frame)
		button_frame.pack(fill=tk.X)
		
		self.send_button = ttk.Button(button_frame, text="Send (Enter)", command=self.send_text)
		self.send_button.pack(side=tk.LEFT, padx=(0, 10))
		
		self.clear_button = ttk.Button(button_frame, text="Clear (Esc)", command=self.clear_text)
		self.clear_button.pack(side=tk.LEFT, padx=(0, 10))
		
		self.auto_button = ttk.Button(button_frame, text="Toggle Auto (F1)", command=self.toggle_auto)
		self.auto_button.pack(side=tk.LEFT, padx=(0, 10))
		
		# Key bindings
		self.root.bind('<Return>', lambda e: self.send_text())
		self.root.bind('<Escape>', lambda e: self.clear_text())
		self.root.bind('<F1>', lambda e: self.toggle_auto())
		self.input_entry.bind('<Return>', lambda e: self.send_text())
		self.input_entry.bind('<Escape>', lambda e: self.clear_text())
		
		# Focus on input
		self.input_entry.focus_set()
		
		# Handle window close
		self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
		
	def monitor_file(self):
		"""Monitor the input file for new data"""
		try:
			with open(self.input_file, 'r') as f:
				while self.running:
					line = f.readline()
					if line:
						data = line.rstrip('\n')
						if self.auto_mode:
							# In auto mode, send immediately
							self.root.after(0, self.append_output, f"[AUTO] {data}\n")
							self.send_to_program(data)
						else:
							# Append to input entry
							self.root.after(0, self.append_to_input, data)
					else:
						time.sleep(0.01)
		except Exception as e:
			self.root.after(0, self.append_output, f"Error monitoring file: {e}\n")
			
	def monitor_output(self):
		"""Monitor program output"""
		try:
			while self.running and self.process.poll() is None:
				line = self.process.stdout.readline()
				if line:
					self.root.after(0, self.append_output, line)
				else:
					time.sleep(0.01)
		except Exception as e:
			self.root.after(0, self.append_output, f"Error monitoring output: {e}\n")
			
	def append_to_input(self, text):
		"""Append text to input entry (thread-safe)"""
		current = self.input_entry.get()
		self.input_entry.delete(0, tk.END)
		self.input_entry.insert(0, current + text)
		
	def append_output(self, text):
		"""Append text to output area (thread-safe)"""
		self.output_text.config(state=tk.NORMAL)
		self.output_text.insert(tk.END, text)
		self.output_text.see(tk.END)
		self.output_text.config(state=tk.DISABLED)
		
	def send_text(self):
		"""Send current text to program"""
		text = self.input_entry.get()
		if not self.auto_mode:
			self.append_output(f"> {text}\n")
			self.send_to_program(text)
			self.input_entry.delete(0, tk.END)
			
	def clear_text(self):
		"""Clear input text or exit auto mode"""
		if self.auto_mode:
			self.toggle_auto()
		else:
			self.input_entry.delete(0, tk.END)
			
	def toggle_auto(self):
		"""Toggle auto mode"""
		self.auto_mode = not self.auto_mode
		if self.auto_mode:
			# Send current text if any
			current_text = self.input_entry.get()
			if current_text:
				self.append_output(f"> {current_text}\n")
				self.send_to_program(current_text)
				self.input_entry.delete(0, tk.END)
			
			self.mode_label.config(text="AUTO", foreground="red")
			self.status_label.config(text="Auto mode - all incoming data sent automatically")
			self.input_entry.config(state=tk.DISABLED)
		else:
			self.mode_label.config(text="MANUAL", foreground="blue")
			self.status_label.config(text="Manual mode - edit and press Enter to send")
			self.input_entry.config(state=tk.NORMAL)
			self.input_entry.focus_set()
			
	def send_to_program(self, data):
		"""Send data to the target program"""
		try:
			if self.process.poll() is None:  # Process still running
				self.process.stdin.write(data + '\n')
				self.process.stdin.flush()
		except Exception as e:
			self.root.after(0, self.append_output, f"Error sending to program: {e}\n")
			
	def on_closing(self):
		"""Handle window closing"""
		self.running = False
		try:
			self.process.terminate()
			self.process.wait(timeout=2)
		except:
			self.process.kill()
		self.root.destroy()
		
	def run(self):
		"""Start the GUI main loop"""
		self.root.mainloop()

def main():
	if len(sys.argv) < 3:
		print("Usage: preedit <input_file> <program_and_args...>")
		print("Example: preedit /tmp/input.txt python -u script.py --verbose")
		sys.exit(1)
		
	input_file = sys.argv[1]
	program_args = sys.argv[2:]
	
	if not os.path.exists(input_file):
		print(f"Error: Input file '{input_file}' not found")
		sys.exit(1)
		
	try:
		app = PreEditGUI(input_file, program_args)
		app.run()
	except KeyboardInterrupt:
		print("\r\n[Interrupted]")
	except Exception as e:
		print(f"\r\nError: {e}")
		sys.exit(1)

if __name__ == "__main__":
	main()