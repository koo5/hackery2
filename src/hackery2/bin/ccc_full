#!/bin/env fish

# Parse arguments
set include_context true
set do_push true
set prompt_args

for arg in $argv
	if test "$arg" = "--no-context"
		set include_context false
	elif test "$arg" = "--no-push"
		set do_push false
	else
		set prompt_args $prompt_args $arg
	end
end

set prompt $prompt_args
if test -z "$prompt"
	# Count will be available after we get changed_files
	set prompt_template 'Write a commit message for the following git changes affecting %d files. You are provided with:
1. The git diff showing what changed
2. The full content of all affected files for context (if enabled)

Analyze the changes in context and write a clear, descriptive commit message. 
- Start with a concise summary line (max 50 chars if possible)
- Optionally add a blank line followed by more detailed explanation
- Focus on WHY the changes were made, not just WHAT changed
- Be concise for minor changes (typos, formatting, etc)
- Group related changes together
- Mention each significant area of work on a separate line

Answer with ONLY the commit message, no additional commentary.'
end

if git --no-pager diff --exit-code  --cached
	# No changes to commit
	exit
else
	echo
	
	# Get list of changed files first to display count (convert to absolute paths)
	set git_root (git rev-parse --show-toplevel)
	set changed_files_rel (git diff --name-only  --cached)
	set changed_files
	for file in $changed_files_rel
		set changed_files $changed_files "$git_root/$file"
	end
	set file_count (count $changed_files)
	
	# Set the actual prompt with file count if using template
	if test -n "$prompt_template"
		set formatted_prompt (printf "$prompt_template" $file_count)
		set prompt --model o3-mini "$formatted_prompt"
	end
	
	if test "$include_context" = "true"
		printf 'Analyzing %d changed files with full file context...\n\n' $file_count
	else
		printf 'Analyzing %d changed files (no full context)...\n\n' $file_count
	end

	# Create a temporary file to store all the information
	set context_file (mktemp /tmp/commit_context.XXXXXX)
	
	# Add intentions if available
	set intentions (intention get)
	if test -n "$intentions"
		echo "< ==== CURRENT DEVELOPMENT INTENTIONS ==== >" >> $context_file
		echo "$intentions" >> $context_file
		echo "< /==== CURRENT DEVELOPMENT INTENTIONS ==== >" >> $context_file
		echo "" >> $context_file
	end
	
	# Add summary
	echo "< ==== SUMMARY OF CHANGES ==== >" >> $context_file
	echo "Modified files: "(count $changed_files) >> $context_file
	for file in $changed_files
		echo "  - $file" >> $context_file
	end
	echo "< /==== SUMMARY OF CHANGES ==== >" >> $context_file
	echo "" >> $context_file
	
	# Add the diff
	echo "< ==== DETAILED DIFF ==== >" >> $context_file
	git diff --cached >> $context_file
	echo "< /==== DETAILED DIFF ==== >" >> $context_file
	echo "" >> $context_file
	
	# Add full content of each changed file with better formatting (if enabled)
	echo "DEBUG: include_context='$include_context', file_count=$file_count" >> $context_file
	if test "$include_context" = "true"
		echo "< ==== FULL FILE CONTENTS FOR CONTEXT ==== >" >> $context_file
		#echo "DEBUG: Starting to process $file_count files" >> $context_file
		for file in $changed_files
			#echo "DEBUG: Processing file: '$file'" >> $context_file
			if test -f $file
				# Check if file is text using file command
				set file_type (file --mime-type --brief $file)
				if string match --quiet 'text/*' $file_type; or string match --quiet 'application/json' $file_type; or string match --quiet 'application/xml' $file_type; or string match --quiet 'application/javascript' $file_type
					#echo "DEBUG: File exists and is text, adding content" >> $context_file
					echo "" >> $context_file
					echo "┌─────────────────────────────────────────" >> $context_file
					echo "│ File: $file" >> $context_file
					echo "│ Size: "(wc -l < $file)" lines" >> $context_file
					echo "│ Type: $file_type" >> $context_file
					echo "└─────────────────────────────────────────" >> $context_file
					echo "" >> $context_file
					cat -n $file >> $context_file
					echo "" >> $context_file
				else
					#echo "DEBUG: Skipping binary file: '$file' (type: $file_type)" >> $context_file
					echo "" >> $context_file
					echo "┌─────────────────────────────────────────" >> $context_file
					echo "│ File: $file" >> $context_file
					echo "│ Type: $file_type (BINARY - SKIPPED)" >> $context_file
					echo "└─────────────────────────────────────────" >> $context_file
					echo "" >> $context_file
				end
			else
				#echo "DEBUG: File '$file' does not exist!" >> $context_file
			end
		end
		#echo "DEBUG: Finished processing all files" >> $context_file
		echo "< /==== FULL FILE CONTENTS FOR CONTEXT ==== >" >> $context_file
	else
		echo "DEBUG: Skipping full context because include_context='$include_context'" >> $context_file
	end
	
	# Stream llm output word-by-word, capturing simultaneously
	set F (mktemp /tmp/commit_msg.XXXXXX)
	cat $context_file | llm prompt $prompt | dd bs=1 status=none | tee $F
	or exit 1
	set commit_message (cat $F | string collect)
	
	# get the body of the prompt and prepend each line with a #
	set commented_prompt (cat $context_file | sed 's/^/# /' | string collect)

	# Create temporary file for commit message to avoid argument length limits
	set commit_file (mktemp /tmp/commit_message.XXXXXX)
	printf "%s\n\n%s" "$commit_message" "$commented_prompt" > $commit_file

	# run git commit with message from file to avoid argument length limits
	git commit -F $commit_file -e
	and begin
		# Clear intentions after successful commit
		intention clear >/dev/null 2>&1
		if test "$do_push" = "true"
			gp
		end
	end

	# Clean up temp files
	rm -f $context_file $F $commit_file

end