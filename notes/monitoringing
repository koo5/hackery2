meta
	https://prometheus.io/docs/introduction/comparison/

guides
	https://apuravchauhan.medium.com/app-monitoring-and-alerting-a-practical-prometheus-spring-boot-tutorial-d79449b9278d	


alerting
	https://discourse.sensu.io/t/alerting-solution/2112


plotting / dashboard
	https://grafana.com/
	https://nasa.github.io/openmct/
	


todo:
	https://en.wikipedia.org/wiki/Cacti_(software)
	https://www.nagios.com/
	https://www.rabbitmq.com/prometheus.html
	https://www.influxdata.com/
	https://www.nomadproject.io/docs/integrations/consul-integration
	https://hub.docker.com/r/mattogodoy/omni
	https://www.zabbix.com/
	https://github.com/netdata/netdata/wiki
	https://www.influxdata.com/integration/alerta/
	https://alerta.io/
	https://icinga.com/
	http://www.thruk.org/
	https://uchiwa.io/#/
	https://www.zabbix.com/
	https://github.com/Freeboard/freeboard
	
	
	
	
	
https://demo.staytus.co/
	- i really like this, but would have to drive the content thru its api
	- https://github.com/adamcooke/staytus/issues/355
	
	
	




grafana on localhost:
	```
	docker run  \                                                      
					-e "GF_SERVER_HTTP_PORT=3333" \
					--name=grafana \
					-e "GF_SERVER_ROOT_URL=http://localhost:3333" \
					-e "GF_SECURITY_ADMIN_PASSWORD=secret" \
		--network="host" \
					grafana/grafana
	```



https://prometheus.io/
	handles alert hysteresis and dispatches to alertmanager
	only understands numbers - gauge, count, histogram etc
	the pipeline is not event-oriented

	so, to make this work, my checker/tester scripts would have to provide a metric file for prometheus to scrape. This could possibly be a text file saved in a web server's dir, but then there's no sync between tests and scrapes. 
	
	Because what we want to pipeline/report are more like events. If we take the viewpoint of "metrics", then a testcase failure would be represented as "number_of_testcase_failures"=1,job=xxxx... and in that case, we don't want to have even a single event really ignored by prometheus.
	
	So, we need a premanently running tester/checker server. If going with metrics, it can run tests in a loop, but always only when last metrics were transmitted ... maybe that's a bit error-prone because anyone can GET /metrics and "snatch" the failure.. 
	
	

	
https://github.com/prometheus/alertmanager
	a bit of a buddy of prometheus
	postponing, silencing, grouping, dispatching
	``` handles alerts sent by client applications such as the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integrations such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.```
	android clients:
		https://m.apkpure.com/prometheus-alerts/com.khafan.prometheusalerts
		https://github.com/crisidev/proboviro
			- dead?
	
	
	
	
https://github.com/influxdata/kapacitor
	"TICKscript"
	maybe more advanced than prometheus, but more open-core-ish
	https://docs.influxdata.com/kapacitor/v1.5/working/kapa-and-chrono/
	
	```Chronograf offers a UI for Kapacitor, InfluxDataâ€™s data processing framework for creating alerts, running ETL jobs, and detecting anomalies in your data.

    Generate threshold, relative, and deadman alerts on your data
    Easily enable and disable existing alert rules
    View all active alerts on an alert dashboard
    Send alerts to the supported event handlers, including Slack, PagerDuty, HipChat, and more```

	- but is it metric- or event- oriented?
	
	

https://github.com/sensu/sensu-go
	commercial, limited free, source available
	docs show lack of maintenance
	event-oriented
	```Agents automatically register with Sensu as entities when you start them up and connect to the Sensu backend with no need for further provisioning. You only need to specify the IP address for the Sensu backend server ```

	sensu on localhost:
		```

		docker network create sensu 

		docker volume create sensu-backend-data              

		sensuctl configure -n --url http://127.0.0.1:8080 \
			--username admin \
			--password "P@ssw0rd!" \
			--namespace default

		sudo docker run  --rm --name sensu-backend \      
			--network sensu -p 8080:8080 -p 3000:3000 \
			-v sensu-backend-data:/var/lib/sensu \
			sensu/sensu:6.2.7 sensu-backend start

		docker run --rm --network sensu  -p 3030:3030 -p 3031:3031  \
			--link sensu-backend --name sensu-agent \
			--volume "/var/lib/sensu:/var/lib/sensu" \
            sensu/sensu:6.2.7 sensu-agent start \
            --backend-url ws://sensu-backend:8081 --log-level debug --deregister \
            --keepalive-interval=5 --keepalive-warning-timeout=10 --subscriptions linux \
            --api-host 0.0.0.0 --cache-dir /var/lib/sensu
		```
		
		security:
			docker probably makes most sense
			
		




